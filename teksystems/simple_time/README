= SimpleTime
A class for simple time calculation

The class provides one method, SimpleTime::add_minutes.

==Requirements

Without using any built in date or time functions, write a function or method
that accepts two mandatory arguments. The first argument is a string of the
format "[H]H:MM {AM|PM}" and the second argument is an integer. Assume the
integer is the number of minutes to add to the string. The return value of
the function should be a string of the same format as the first argument.
For example AddMinutes("9:13 AM", 10) would return "9:23 AM". The exercise
isn't meant to be too hard. I just want to see how you code. Feel free to
do it procedurally or in an object oriented way, whichever you prefer. Use
Ruby. Write production quality code.

==Implementation

SimpleTime::add_minutes adds an integer to a string representing a time in
a 12-hour format.  This is implemented as a class method so use is like:

  SimpleTime::add_minutes('11:59 AM', 1) -> '12:00 PM'

===time_string parameter

The leading hour is optional so "9:15 AM" is accepted.  The returned value
mimics the input; a single digit hour is output if one is input (and the
resulting hour is 9 or less).  The output hour is padded with '0' if the
input was padded.  If the input hour was two digits and the result is one
significant digit, the output will be padded to two digits.

As described in http://en.wikipedia.org/wiki/12-hour_clock, '12:00 AM' is 
midnight on a 12-hour clock, not 00:00 and a "0" hour is not accepted.

The minutes field must be 2 digits.

The input's meridiem (AM/PM indicator) is case-insensitive and the output mirrors the
input's case even if there is a change from AM to PM.

Leading a trailing whitespace is ignored as is the spaces between the time
and the AM/PM indicator.

===minutes paramter

The number of minutes to add is either an Integer a class that derives from
Integer.  The value can be positive or negative.

The calculation wraps around the clock. Adding a week to 10:00 AM will result
in 10:00 AM.

==Code Structure

As mentioned above, the code is implemented as class methods.  This makes calling
a constructor unnecessary but introduces the need to pass all needed information
since there are no instance variables and using class variables is inadvisable.
The result is that a hash is passed that contains information generated by the
parsing method and needed by the formatting method.  An alternative implementation
might well use instance variables for these data.

==Unit Tests

A set of unit tests are provided.  These can be run with

  ruby test/unit/test_simple_time.rb

The code coverate is 100% with 7 tests and 54 assertions, as documented
in coverage/index.html

Testing was done under ruby 1.9.2p320 (2012-04-20 revision 35421).

==Documentation

Rdoc documentation is provided in doc/index.html

Eric Peabody
4/3/2013
